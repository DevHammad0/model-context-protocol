from mcp.server.fastmcp import FastMCP, Context
from mcp.types import SamplingMessage, TextContent

# A stateful server is required for server-to-client requests like sampling.
mcp = FastMCP(
    name="mcp-sampling-server",
    stateless_http=False,
)


@mcp.tool()
async def create_story(ctx: Context, topic: str) -> str:
    """
    Creates a short story by asking the client to generate it via sampling.

    Args:
        ctx: The MCP Context, used to communicate with the client.
        topic: The topic for the story.

    Returns:
        The story generated by the client's LLM.
    """
    print(f"-> Server: Tool 'create_story' called with topic: '{topic}'")

    try:
        print(f"-> Server: Sending 'sampling/create' request to client...")

        #    The server delegates the "thinking" to the client.
        result = await ctx.session.create_message(
            messages=[
                SamplingMessage(
                    role="user",
                    content=TextContent(type="text", text=f"Write a very short, three-sentence story about: {topic}"),
                )
            ],
            max_tokens=100,
        )

        if result.content.type == "text":
            return result.content.text
        return str(result.content)

    except Exception as e:
        print(f"-> Server: An error occurred during sampling: {e}")
        return f"Error asking client to generate story: {e}"


@mcp.tool()
async def summarize_document(ctx: Context, text: str) -> str:
    """
    Summarizes a document by asking the client to generate a summary via sampling.

    Args:
        ctx: The MCP Context, used to communicate with the client.
        text: The document text to summarize.

    Returns:
        The summary generated by the client's LLM.
    """
    print(f"-> Server: Tool 'summarize_document' called with text length: {len(text)} characters")

    try:
        print(f"-> Server: Sending 'sampling/create' request to client for summarization...")

        # Step 1: Ask client to chunk & summarize
        summary = await ctx.session.create_message(
            messages=[ SamplingMessage(
                role="user",
                content=TextContent(type="text",
                    text=f"Summarize this document in three bullet points:\n\n{text}") ) ],
            max_tokens=150
        )
        return summary.content.text

    except Exception as e:
        print(f"-> Server: An error occurred during sampling: {e}")
        return f"Error asking client to summarize document: {e}"


# Expose the server as a runnable ASGI application
mcp_app = mcp.streamable_http_app()


if __name__ == "__main__":
    import uvicorn
    print("Starting MCP server on port 8000")
    uvicorn.run("server:mcp_app", host="0.0.0.0", port=8000, reload=True)